# -*- coding: utf-8 -*-

"""
date : 06-09-2022
@author: jally
"""

from tkinter import *
from tkinter import messagebox
     
           
###############################################################################
#                           Define root                                    #
###############################################################################

root = Tk()
root.title("Tic-Tac-Toe") 
import numpy as np

###############################################################################
#                               Globals                                       #
###############################################################################

CLICKED = True # X turn (X plays first), if False : O turn
COUNT = 0
BUT_ARRAY = 0

###############################################################################
#                               Game code                                     #
###############################################################################

def initialise_grid () :
    """
    initialise the button and place them in an array
    """
    global BUT_ARRAY 
    
    b1 = Button (root, text = " ", height = 3, width = 6, bg = "white",command = lambda : button_click(b1))
    b2 = Button (root, text = " ", height = 3, width = 6, bg = "white", command = lambda : button_click(b2))
    b3 = Button (root, text = " ", height = 3, width = 6, bg = "white", command = lambda : button_click(b3))

    b4 = Button (root, text = " ", height = 3, width = 6, bg = "white", command = lambda : button_click(b4))
    b5 = Button (root, text = " ", height = 3, width = 6, bg = "white", command = lambda : button_click(b5))
    b6 = Button (root, text = " ", height = 3, width = 6, bg = "white", command = lambda : button_click(b6))

    b7 = Button (root, text = " ", height = 3, width = 6, bg = "white", command = lambda : button_click(b7))
    b8 = Button (root, text = " ", height = 3, width = 6, bg = "white", command = lambda : button_click(b8))
    b9 = Button (root, text = " ", height = 3, width = 6, bg = "white", command = lambda : button_click(b9))

    b1.grid(row = 0, column = 0)
    b2.grid(row = 0, column = 1)
    b3.grid(row = 0, column = 2)

    b4.grid(row = 1, column = 0)
    b5.grid(row = 1, column = 1)
    b6.grid(row = 1, column = 2)

    b7.grid(row = 2, column = 0)
    b8.grid(row = 2, column = 1)
    b9.grid(row = 2, column = 2)

    #the array of buttons
    BUT_ARRAY = np.array([[b1, b2, b3], [b4, b5, b6], [b7, b8, b9]])
    pass

def button_click(b):
    """
    change the text of the button depending on whose turn it is to play and check if someone won

    Args:
        b (button): a button generated by the initialise_grid function
    """
    global CLICKED, COUNT
    if b["text"] == " " and CLICKED == True: #X turn and no text in button
        b["text"] = "X"
        CLICKED = False
        COUNT += 1
        check_win()
        
    elif b["text"] == " " and CLICKED == False:
        b["text"] = "O"
        CLICKED = True
        COUNT += 1
        check_win()
        
    else:
        messagebox.showerror("Tic-Tac-Toe", "Hey! That box has already been selected\nPick another box...")
        

def check_lignes (arr) :
    """
    check if three same characters are on the same line (O or X) and columns
    args :
        arr : array of the buttons
    return :
        True if there is a winner, False otherwise
    """
    for i in range(3) :
        if arr[i][0].cget("text") == arr[i][1].cget("text") == arr[i][2].cget("text") != " " :
            return True
    
    arr_rot = np.rot90(arr)
    
    for i in range(3) :
        if arr_rot[i][0].cget("text") == arr_rot[i][1].cget("text") == arr_rot[i][2].cget("text") != " " :
            return True    
    
    return False


def check_diags (arr) :
    """
    check if three same characters are on the same diagonal (O or X)
    args :
        arr : array of the buttons
    return :
        True if there is a winner, False otherwise
    """
    if arr[0][0].cget("text") == arr[1][1].cget("text") == arr[2][2].cget("text") != " " :
        return True
    elif arr[0][2].cget("text") == arr[1][1].cget("text") == arr[2][0].cget("text") != " " :
        return True
    else :
        return False
    

def check_win () :
    """
    check if either player is winning and reinitialise the grid if someone won
    """ 
    global BUT_ARRAY
    col_or_li = check_lignes(BUT_ARRAY)
    diags = check_diags(BUT_ARRAY)
    if col_or_li or diags :
        if CLICKED :
            messagebox.showinfo("Tic-Tac-Toe", "Player O wins!")
        else :
            messagebox.showinfo("Tic-Tac-Toe", "Player X wins!")
            
        initialise_grid()
    else :
        pass
    

###############################################################################
#                           Game script                                       #
###############################################################################

initialise_grid()

root.mainloop()